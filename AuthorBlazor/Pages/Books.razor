@page "/Books"
@using Domain.Models
@using UIElements
@using AuthorBlazor.HttpService
@inject NavigationManager NavMgr
@inject HttpService _httpService;

<h3>Books</h3>

<div class="filterbar">
    <div class="filterscontainer">
        <img src="img/@(doShowFilters?"clear_" : "")funnel.png" 
        class="funnel" 
        @onclick="OpenCloseFilters"/>
        
        @if (doShowFilters)
        {
            <EditForm Model="@newBook" OnValidSubmit="@ApplyFilters">
                <div class="form-group field">
                    <span>
                        <label>Author: </label>
                    </span>
                    <span>
                            <InputSelect @bind-Value="@authorsFirstNameFilter" class="form-select">
                                @if (allAuthors != null)
                                {
                                    @foreach (var a in allAuthors)
                                    {
                                        <option value="@a.FirstName">@a.FirstName @a.LastName</option>
                                    }
                                }
                            </InputSelect>
                    </span>
        </div>  
        <div class="form-group field">
                    <span>
                        <label>Book title: </label>
                    </span>
                    <span>
                            <InputSelect @bind-Value="@bookTitleFilter" class="form-select">
                                @if (allBooks != null)
                                {
                                    @foreach (var book in allBooks)
                                    {
                                        <option value="@book.Title">@book.Title</option>
                                    }
                                }
                            </InputSelect>
                    </span>
        </div>          
        <p class="actions">
                    <button class="btn btn-outline-dark acceptbtn" type="submit">Apply filter</button>
                </p>
            </EditForm>
            <label>Error label: <br/> ((..)) @errorLabel</label>
        }
    </div>
</div>

@if (booksToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!booksToShow.Any())
{
    <p>
        <em>No books exist. Please remove filter or add new books.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Title</th> <th>PubYear</th> <th>NumOfPages</th> <th>AuthorFirstName</th> <th>AuthorLastName</th> <th>Remove</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in booksToShow)
        {
            <tr>
                <td>@item.Title</td>
                <td>@item.PublicationYear</td>
                <td>@item.NumOfPages</td>
                <td>@item.Author.FirstName</td>
                <td>@item.Author.LastName</td>
                <td>
                    <label
                        @onclick="@(() => RemoveBook(item.ISBN))"
                        style="cursor:pointer; color: red; font-weight: bold">
                        &#x2717;
                    </label>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
@if (!string.IsNullOrEmpty(errorLabel))
{
    <label style="color: red">@errorLabel</label>
}

@code {
    private string errorLabel = "";
    private Book newBook = new();
    private Author author = new ();
    private List<Author> allAuthors;
    private List<Book> booksToShow, allBooks;
    private bool showModal;
    
    // filtering feature
    private string? authorsFirstNameFilter;
    private string? bookTitleFilter;
    private bool doShowFilters;
    
    protected override async Task OnInitializedAsync()
    {
        allBooks = await _httpService.GetAllBooksAsync();
        allAuthors = await _httpService.GetAllAuthorsAsync();
        booksToShow = allBooks.ToList();
        OpenCloseFilters();
        await ApplyFilters();
    }

    private async Task RemoveBook(int ISBN)
    {
        errorLabel = "";
        try
        {
    // var bookToRemove = books.First(book => book.Id == id);
    // books.Remove(bookToRemove);
            await _httpService.DeleteBookAsync(ISBN);
            await ApplyFilters();
            allBooks = await _httpService.GetAllBooksAsync();
        }
        catch (Exception e)
        {
            errorLabel = e.Message;
        }
    }

    private async Task OpenCloseFilters()
    {
        doShowFilters = !doShowFilters;
        if (!doShowFilters)
        {
            authorsFirstNameFilter = null;
            bookTitleFilter = null;
            booksToShow = await _httpService.GetAllBooksAsync();
        }
    }

    private async Task ApplyFilters()
    {
        booksToShow =  await _httpService.GetBooksFilteredAsync(authorsFirstNameFilter, bookTitleFilter);
    }
}